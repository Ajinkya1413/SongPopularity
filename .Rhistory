View(iris1)
summary_stats <-  data.frame(mean = sapply(iris1$Sepal.Length, mean, na.rm = T))
print(summary_stats)
#a. Produce summary statistics of all numeric variables in iris1.
summary(iris1)
summary_stats <-  data.frame(mean = sapply(iris1, mean, na.rm = T)
median = sapply(iris1, median, na.rm = T)
)
summary_stats <-  data.frame(mean = sapply(iris1, mean, na.rm = T)
median = sapply(iris1, median, na.rm = T))
print(summary_stats)
summary_stats <-  data.frame(mean = sapply(iris1, mean, na.rm = T),
median = sapply(iris1, median, na.rm = T))
print(summary_stats)
summary_stats <-  data.frame(mean = sapply(iris1, mean, na.rm = T),
median = sapply(iris1, median, na.rm = T),
min = sapply(iris1, min, na.rm = T),
max = sapply(iris1, max, na.rm = T)
)
summary_stats <-  data.frame(mean = sapply(iris1, mean, na.rm = T),
median = sapply(iris1, median, na.rm = T),
min = sapply(iris1, min, na.rm = T),
max = sapply(iris1, max, na.rm = T),
FirstQ = sapply(iris1, nrow(iris)*0.25)
)
summary_stats <-  data.frame(mean = sapply(iris1, mean, na.rm = T),
median = sapply(iris1, median, na.rm = T),
min = sapply(iris1, min, na.rm = T),
max = sapply(iris1, max, na.rm = T),
FirstQ = sapply(iris1, iris*0.25)
)
summary_stats <-  data.frame(mean = sapply(iris1, mean, na.rm = T),
median = sapply(iris1, median, na.rm = T),
min = sapply(iris1, min, na.rm = T),
max = sapply(iris1, max, na.rm = T)
)
print(summary_stats)
summary(iris1)
#b. Boxplot of Petal.Length for different values of Species
boxplot(iris$Petal.Length)
############################ QUESTION 7  ##################################
# Creating dataframe
students=data.frame(name=c("Tom","John","Sid","Paul",
"Cassie","Jim","Dwight")
,maths=c(7,8,NA,9,10,8,9)
,science=c(5,7,6,8,NA,7,8)
,history=c(7,NA,7,7,NA,7,7))
print(students)
# Return the dataframe student after removing rows with NA in 'science' column
student <- data.frame(students,na.rm = F)
student
# Return the dataframe student after removing rows with NA in 'science' column
student <- data.frame(students,na.rm = T)
student
# Return the dataframe student after removing rows with NA in 'science' column
student <- sapply(students, na.rm = T)
# Return the dataframe student after removing rows with NA in 'science' column
students$science <- students[students$science != NA]
# Return the dataframe student after removing rows with NA in 'science' column
students$science <- students[,students$science != NA]
# Return the dataframe student after removing rows with NA in 'science' column
students$science <- students[students$science != NA,]
student <- students
############################ QUESTION 7  ##################################
# Creating dataframe
students=data.frame(name=c("Tom","John","Sid","Paul",
"Cassie","Jim","Dwight")
,maths=c(7,8,NA,9,10,8,9)
,science=c(5,7,6,8,NA,7,8)
,history=c(7,NA,7,7,NA,7,7))
print(students)
# Return the dataframe student after removing rows with NA in 'science' column
student <- students[students$science != NA,]
student
# Return the dataframe student after removing rows with NA in 'science' column
student <- students[,students$science != NA]
# Return the dataframe student after removing rows with NA in 'science' column
student <- students[students, na.rm = T]
# Return the dataframe student after removing rows with NA in 'science' column
student <- students(na.rm = T)
sum_abs = function(x,y) (z <- abs(x) + abs(y)
return(z))
sum_abs = function(x,y) {z <- abs(x) + abs(y)
return(z)}
# Use the function
sum_abs(-6, 3)
############### QUESTION 9 ####################################
# mtcars is a preloaded Data Set with class "data.frame"
View(mtcars)
class(mtcars)
str(mtcars)
df.mtcars <- mtcars
# Plot a histogram showing the distribution of mpg in the dataframe df.mtcars
hist(df.mtcars$mpg)
############### QUESTION 10 ####################################
# mtcars is a preloaded Data Set with class "data.frame"
df.mtcars <- mtcars
# Preprocessing
df.mtcars$am <- as.factor(df.mtcars$am)
levels(df.mtcars$am) <-c("AT", "MT")
# split df.mtcars into train.df with 70% data and validation.df with 30% data
nrows <- count(df.mtcars)
# split df.mtcars into train.df with 70% data and validation.df with 30% data
nrows <- nrows(df.mtcars)
# split df.mtcars into train.df with 70% data and validation.df with 30% data
nrows <- nrow(df.mtcars)
nrows
View(df.mtcars)
train.df <- sample(df.mtcars, nrows*0.7)
# split df.mtcars into train.df with 70% data and validation.df with 30% data
nrows <- nrow(df.mtcars)*0.7
train.df <- sample(df.mtcars, nrows)
set.seed(2)
train.df <- sample(df.mtcars, nrows)
train.df <- sample(df.mtcars, 15)
train.df <- sample(df.mtcars, nrows, replace = F)
train.df <- sample(df.mtcars, nrows, replace = T)
nrows
train.df <- sample(df.mtcars, abs(nrows), replace = T)
train.df <- sample(df.mtcars, abs(nrows))
validation.df <- df.mtcars[-train.df]
validation.df <- df.mtcars[-train.df,]
validation.df <- df.mtcars[-[train.df],]
validation.df <- df.mtcars[-train.df]
validation.df <- df.mtcars[,-train.df]
validation.df <- df.mtcars[-train.df,]
######################## QUESTION 11 ########################################
# Given string
str <- "Business Analytics is the practice and art of bringing quantitative data to bear on decision making."
# Printing original string
print (str)
# Print total number of words in the string
length(str)
# Print total number of words in the string
count.fields(str)
# Print total number of words in the string
count(str)
# Print total number of words in the string
nchar(str)
# Use grep() to match for "edu", save result to edu_emails
edu_emails <- grep(emails,"edu")
################# QUESTION 12 ########################################
# The emails vector has already been defined for you
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
# Use grep() to match for "edu", save result to edu_emails
edu_emails <- grep(emails,"edu")
# Use grep() to match for "edu", save result to edu_emails
edu_emails <- grep(emails,"edu")
edu_emails
# Use grep() to match for "edu", save result to edu_emails
edu_emails <- grepl(emails,"edu")
edu_emails
# Use grep() to match for "edu", save result to edu_emails
edu_emails <- grepl(x = emails,pattern = "edu")
edu_emails
# Subset emails using edu_emails to select from the emails vector only the emails that contain "edu"
edu_emails_sub <- emails[edu_emails]
edu_emails_sub
# Use grep() to match for "edu", save result to edu_emails
edu_emails <- grepl(x = emails,pattern = ".edu")
edu_emails
# Subset emails using edu_emails to select from the emails vector only the emails that contain "edu"
edu_emails_sub <- emails[edu_emails]
edu_emails_sub
fit_all<- lm(train.df$mpg ~ .,x = train.df)
fit_all<- lm(train.df$mpg ~ .,data = train.df)
# Display summary of the model
summary(fit_all)
setwd("C:/Users/aaa210016/Desktop/UTD/BA with R BUAN 6356/Music Recomendation proj")
library(tidyverse)
library(olsrr)
library(dplyr)
library(gains)
library(caret)
library(ROCR)
library(rpart)
library(rpart.plot)
library(e1071)
library(FNN)
library(ggplot2)
library(corrplot)
library(DT)
library(highcharter)
library(FNN)
#Importing Dataset
tracks.df <- read.csv("genre_songs.csv", header=T, na.strings=c("","NA"))
#View(tracks.df)
#view(tracks.df[tracks.df$track.id =="5MvCurNMpM3WCCSs40cd37",])
-------------------------------------------------------------------------------------
#DataCleaning
#head(tracks.df)
tracks_final.df <- select(tracks.df, -c(track.album.id, track.album.name, playlist_name, playlist_id ))
#view(tracks_final.df)
tracks_final.df = tracks_final.df %>%
rename(
id = track.id,
popularity = track.popularity,
genre = playlist_genre,
sub.genre = playlist_subgenre,
release.date = track.album.release_date,
artist = track.artist
)
view(tracks_final.df)
# track id =
#5MvCurNMpM3WCCSs40cd37
#577AGkqnLPYPy6AcOnxhfx
#577AGkqnLPYPy6AcOnxhfx
#577AGkqnLPYPy6AcOnxhfx
#loudness more that zero = 0
missing_values = colSums(is.na(tracks_final.df))
missing_values
tracks_final.df <- tracks_final.df[!duplicated(tracks_final.df$id),]
tracks_final.df <- na.omit(tracks_final.df)
tracks_final.df$loudness <- ifelse(tracks_final.df$loudness>0,0,tracks_final.df$loudness)
#tracks_final.df$Bin_pop <- ifelse(tracks_final.df$popularity<=60,0,1)
tracks_final.df$cat_pop <- round(tracks_final.df$popularity/10,digits = 0)
tracks_final.df$duration_min <- tracks_final.df$duration_ms/60000
tracks_final.df$Bin_pop <- ifelse(tracks_final.df$popularity<=60,0,1)
# if(nchar(tracks_final.df$release.date) > 6 & nchar(tracks_final.df$release.date) < 8) {
#   tracks_final.df$release.date_sub <- substr(tracks_final.df$release.date, 1,4)
# }
#
# date_char8 <- nchar(tracks_final.df$release.date) == 8
# tracks_final.df$release.date[date_char8]
# date_char7 <- nchar(tracks_final.df$release.date) == 7
# tracks_final.df$release.date[date_char7]
# date_char4 <- nchar(tracks_final.df$release.date) == 4
# tracks_final.df$release.date[date_char4]
# tracks_final.df$release.date_sub <- substr(tracks_final.df$release.date[date_char8], 7,8)
#tracks_final.df$release.date_format <- as.Date(tracks_final.df$release.date) #cleaning $release_date
tracks_final.df$artist = as.factor(tracks_final.df$artist)
tracks_final.df$genre = as.factor(tracks_final.df$genre)
#tracks_final1.df <- tracks_final.df[,!c("track.name","popularity", )]
view(tracks_final.df)
#Importing Dataset
tracks.df <- read.csv("genre_songs.csv", header=T, na.strings=c("","NA"))
#head(tracks.df)
tracks_final.df <- select(tracks.df, -c(track.album.id, track.album.name, playlist_name, playlist_id ))
#view(tracks_final.df)
tracks_final.df = tracks_final.df %>%
rename(
id = track.id,
popularity = track.popularity,
genre = playlist_genre,
sub.genre = playlist_subgenre,
release.date = track.album.release_date,
artist = track.artist
)
view(tracks_final.df)
# track id =
#5MvCurNMpM3WCCSs40cd37
#577AGkqnLPYPy6AcOnxhfx
#577AGkqnLPYPy6AcOnxhfx
#577AGkqnLPYPy6AcOnxhfx
#loudness more that zero = 0
missing_values = colSums(is.na(tracks_final.df))
missing_values
tracks_final.df <- tracks_final.df[!duplicated(tracks_final.df$id),]
tracks_final.df <- na.omit(tracks_final.df)
tracks_final.df$loudness <- ifelse(tracks_final.df$loudness>0,0,tracks_final.df$loudness)
#tracks_final.df$Bin_pop <- ifelse(tracks_final.df$popularity<=60,0,1)
tracks_final.df$cat_pop <- round(tracks_final.df$popularity/10,digits = 0)
tracks_final.df$duration_min <- tracks_final.df$duration_ms/60000
tracks_final.df$Bin_pop <- ifelse(tracks_final.df$popularity<=60,0,1)
# if(nchar(tracks_final.df$release.date) > 6 & nchar(tracks_final.df$release.date) < 8) {
#   tracks_final.df$release.date_sub <- substr(tracks_final.df$release.date, 1,4)
# }
#
# date_char8 <- nchar(tracks_final.df$release.date) == 8
# tracks_final.df$release.date[date_char8]
# date_char7 <- nchar(tracks_final.df$release.date) == 7
# tracks_final.df$release.date[date_char7]
# date_char4 <- nchar(tracks_final.df$release.date) == 4
# tracks_final.df$release.date[date_char4]
# tracks_final.df$release.date_sub <- substr(tracks_final.df$release.date[date_char8], 7,8)
#tracks_final.df$release.date_format <- as.Date(tracks_final.df$release.date) #cleaning $release_date
tracks_final.df$artist = as.factor(tracks_final.df$artist)
tracks_final.df$genre = as.factor(tracks_final.df$genre)
#tracks_final1.df <- tracks_final.df[,!c("track.name","popularity", )]
view(tracks_final.df)
numberOfRows <- nrow(tracks_final.df)
tracks_final.df.upsample <- data.frame(upSample(tracks_final.df[,-ncol(tracks_final.df)],as.factor(tracks_final.df$Bin_pop)))
numberOfRows <- nrow(tracks_final.df.upsample)
set.seed(22)
train.index <- sample(numberOfRows, numberOfRows*0.6)
train.index
print(train.index)
train.df_sample <- tracks_final.df.upsample[train.index, ]
valid.df_sample <- tracks_final.df.upsample[-train.index, ]
numberOfRows <- nrow(tracks_final.df)
tracks_final.df$duration_min <- tracks_final.df$duration_ms/60000
set.seed(22)
train.index <- sample(numberOfRows, numberOfRows*0.6)
train.index
print(train.index)
train.df <- tracks_final.df[train.index, ]
valid.df <- tracks_final.df[-train.index, ]
head(valid.df,10)
view(train.df)
logitI.reg <- glm(train.df$Bin_pop ~(danceability + speechiness + valence
+ duration_min), data = train.df, family = "binomial")
options(scipen=999)
summary(logitI.reg)
confusionMatrix(table(predict(logitI.reg, newdata = valid.df_sample,
type="response") >= 0.29, valid.df_sample$Class == 1))
library(randomForest)
rf <- randomForest(as.factor(train.df$Bin_pop) ~ (genre + sub.genre + danceability + energy + key + loudness + mode + speechiness + acousticness + instrumentalness + liveness + valence + tempo
+ duration_min), data = train.df,
ntree = 1000, mtry = 6, nodesize = 1, importance = TRUE, sampsize = 1250)
varImpPlot(rf, type = 1)
#create a confusion matrix
valid.df_sample$Bin_pop <- factor(valid.df_sample$Class)
rf.pred <- predict(rf, valid.df_sample)
confusionMatrix(rf.pred, valid.df_sample$Bin_pop)
hist(tracks_final.df$instrumentalness)
boxplot(tracks_final.df$instrumentalness)
View(tracks_final.df)
tracks_scaled <- scale(tracks_final.df[,c(8,9,10,11,12,13,14,15,16,17,18,21), center = TRUE, scale = TRUE])
tracks_scaled <- scale(tracks_final.df(8,9,10,11,12,13,14,15,16,17,18,21), center = TRUE, scale = TRUE)
tracks_scaled <- scale(tracks_final.df[,c(8,9,10,11,12,13,14,15,16,17,18,21)], center = TRUE, scale = TRUE)
view(tracks_scaled)
boxplot(tracks_scaled$instrumentalness)
tracks_scaled <- as.dataframe(scale(tracks_final.df[,c(8,9,10,11,12,13,14,15,16,17,18,21)], center = TRUE, scale = TRUE))
tracks_scaled <- as.data.frame(scale(tracks_final.df[,c(8,9,10,11,12,13,14,15,16,17,18,21)], center = TRUE, scale = TRUE))
view(tracks_scaled)
boxplot(tracks_scaled$instrumentalness)
boxplot(tracks_scaled$instrumentalness)
boxplot(tracks_scaled$tempo)
boxplot(tracks_final.df[,c(8,9,12,13,14,16)])
boxplot(tracks_final.df[,c(4,8,9,10,11,12,13,14,15,16,18,21,22)])
boxplot(tracks_final.df[,c(8,9,11,12,13,14,15,16,21,22)])
boxplot(tracks_final.df[,c(8,9,12,13,14,15,16,22)])
boxplot(tracks_final.df[,c(8,9,13,14,15,16)])
boxplot(tracks_final.df[,c(4,10,11,12,18,21,22)])
boxplot(tracks_final.df[,c(4,10,11,18,21)])
boxplot(tracks_final.df[,c(4,10,11,21)])
boxplot(tracks_final.df[,c(10,11,21)])
library(tidyverse)
library(olsrr)
library(dplyr)
library(gains)
library(caret)
library(ROCR)
library(rpart)
library(rpart.plot)
library(e1071)
library(FNN)
library(ggplot2)
library(corrplot)
library(DT)
library(highcharter)
library(FNN)
#Importing Dataset
tracks.df <- read.csv("genre_songs.csv", header=T, na.strings=c("","NA"))
#View(tracks.df)
#view(tracks.df[tracks.df$track.id =="5MvCurNMpM3WCCSs40cd37",])
-------------------------------------------------------------------------------------
#DataCleaning
#head(tracks.df)
tracks_final.df <- select(tracks.df, -c(track.album.id, track.album.name, playlist_name, playlist_id ))
#view(tracks_final.df)
tracks_final.df = tracks_final.df %>%
rename(
id = track.id,
popularity = track.popularity,
genre = playlist_genre,
sub.genre = playlist_subgenre,
release.date = track.album.release_date,
artist = track.artist
)
view(tracks_final.df)
# track id =
#5MvCurNMpM3WCCSs40cd37
#577AGkqnLPYPy6AcOnxhfx
#577AGkqnLPYPy6AcOnxhfx
#577AGkqnLPYPy6AcOnxhfx
#loudness more that zero = 0
missing_values = colSums(is.na(tracks_final.df))
missing_values
tracks_final.df <- tracks_final.df[!duplicated(tracks_final.df$id),]
tracks_final.df <- na.omit(tracks_final.df)
tracks_final.df$loudness <- ifelse(tracks_final.df$loudness>0,0,tracks_final.df$loudness)
#tracks_final.df$Bin_pop <- ifelse(tracks_final.df$popularity<=60,0,1)
tracks_final.df$cat_pop <- round(tracks_final.df$popularity/10,digits = 0)
tracks_final.df$duration_min <- tracks_final.df$duration_ms/60000
tracks_final.df$Bin_pop <- ifelse(tracks_final.df$popularity<=60,0,1)
# if(nchar(tracks_final.df$release.date) > 6 & nchar(tracks_final.df$release.date) < 8) {
#   tracks_final.df$release.date_sub <- substr(tracks_final.df$release.date, 1,4)
# }
#
# date_char8 <- nchar(tracks_final.df$release.date) == 8
# tracks_final.df$release.date[date_char8]
# date_char7 <- nchar(tracks_final.df$release.date) == 7
# tracks_final.df$release.date[date_char7]
# date_char4 <- nchar(tracks_final.df$release.date) == 4
# tracks_final.df$release.date[date_char4]
# tracks_final.df$release.date_sub <- substr(tracks_final.df$release.date[date_char8], 7,8)
#tracks_final.df$release.date_format <- as.Date(tracks_final.df$release.date) #cleaning $release_date
tracks_final.df$artist = as.factor(tracks_final.df$artist)
tracks_final.df$genre = as.factor(tracks_final.df$genre)
#tracks_final1.df <- tracks_final.df[,!c("track.name","popularity", )]
numberOfRows <- nrow(tracks_final.df)
tracks_final.df.upsample <- data.frame(upSample(tracks_final.df[,-ncol(tracks_final.df)],as.factor(tracks_final.df$Bin_pop)))
numberOfRows <- nrow(tracks_final.df.upsample)
set.seed(22)
train.index <- sample(numberOfRows, numberOfRows*0.6)
train.index
print(train.index)
train.df_sample <- tracks_final.df.upsample[train.index, ]
valid.df_sample <- tracks_final.df.upsample[-train.index, ]
view(valid.df_sample)
numberOfRows <- nrow(tracks_final.df)
tracks_final.df$duration_min <- tracks_final.df$duration_ms/60000
set.seed(22)
train.index <- sample(numberOfRows, numberOfRows*0.6)
train.index
print(train.index)
train.df <- tracks_final.df[train.index, ]
valid.df <- tracks_final.df[-train.index, ]
train.df$Index <- c(1:17793)
knn.pred1 <- knn(train.df[, c(8,9,10,11,12,13,14,15,16,17,18,21)],
test = valid.df_sample[, c(8,9,10,11,12,13,14,15,16,17,18,21)],
cl = train.df$Bin_pop, k = 1)
conf_mtrx1 <- confusionMatrix(knn.pred1, as.factor(valid.df_sample$Bin_pop))
conf_mtrx1
for(i in 1:5) {
knn.pred <- knn(train.df[, c(8,9,10,11,12,13,14,15,16,17,18,21)],
test = valid.df_sample[, c(8,9,10,11,12,13,14,15,16,17,18,21)],
cl = train.df$Bin_pop, k = i)
conf_mtrx <- confusionMatrix(knn.pred, as.factor(valid.df_sample$Bin_pop))
acc <- conf_mtrx[[3]][1]
print(i)
print(acc)
}
library(tidyverse)
library(olsrr)
library(dplyr)
library(gains)
library(caret)
library(ROCR)
library(rpart)
library(rpart.plot)
library(e1071)
library(FNN)
library(ggplot2)
library(corrplot)
library(DT)
library(highcharter)
library(FNN)
#Importing Dataset
tracks.df <- read.csv("genre_songs.csv", header=T, na.strings=c("","NA"))
#View(tracks.df)
#view(tracks.df[tracks.df$track.id =="5MvCurNMpM3WCCSs40cd37",])
#Importing Dataset
tracks.df <- read.csv("genre_songs.csv", header=T, na.strings=c("","NA"))
#View(tracks.df)
#view(tracks.df[tracks.df$track.id =="5MvCurNMpM3WCCSs40cd37",])
#head(tracks.df)
tracks_final.df <- select(tracks.df, -c(track.album.id, track.album.name, playlist_name, playlist_id ))
#view(tracks_final.df)
tracks_final.df = tracks_final.df %>%
rename(
id = track.id,
popularity = track.popularity,
genre = playlist_genre,
sub.genre = playlist_subgenre,
release.date = track.album.release_date,
artist = track.artist
)
tracks_final.df <- tracks_final.df[!duplicated(tracks_final.df$id),]
tracks_final.df <- na.omit(tracks_final.df)
tracks_final.df$loudness <- ifelse(tracks_final.df$loudness>0,0,tracks_final.df$loudness)
#tracks_final.df$Bin_pop <- ifelse(tracks_final.df$popularity<=60,0,1)
tracks_final.df$cat_pop <- round(tracks_final.df$popularity/10,digits = 0)
tracks_final.df$duration_min <- tracks_final.df$duration_ms/60000
tracks_final.df$Bin_pop <- ifelse(tracks_final.df$popularity<=60,0,1)
#tracks_final.df$release.date_format <- as.Date(tracks_final.df$release.date) #cleaning $release_date
tracks_final.df$artist = as.factor(tracks_final.df$artist)
tracks_final.df$genre = as.factor(tracks_final.df$genre)
#tracks_final1.df <- tracks_final.df[,!c("track.name","popularity", )]
#Create a training and validation partition uisng upsampling
numberOfRows <- nrow(tracks_final.df)
tracks_final.df.upsample <- data.frame(upSample(tracks_final.df[,-ncol(tracks_final.df)],as.factor(tracks_final.df$Bin_pop)))
numberOfRows <- nrow(tracks_final.df.upsample)
set.seed(22)
train.index <- sample(numberOfRows, numberOfRows*0.6)
train.index
print(train.index)
train.df_sample <- tracks_final.df.upsample[train.index, ]
valid.df_sample <- tracks_final.df.upsample[-train.index, ]
numberOfRows <- nrow(tracks_final.df)
tracks_final.df$duration_min <- tracks_final.df$duration_ms/60000
set.seed(22)
train.index <- sample(numberOfRows, numberOfRows*0.6)
train.index
print(train.index)
train.df <- tracks_final.df[train.index, ]
valid.df <- tracks_final.df[-train.index, ]
head(valid.df,10)
#####################################################################################
view(train.df)
train.df$Index <- c(1:17793)
for(i in 1:5) {
knn.pred <- knn(train.df[, c(8,9,10,11,12,13,14,15,16,17,18,21)],
test = valid.df_sample[, c(8,9,10,11,12,13,14,15,16,17,18,21)],
cl = train.df$Bin_pop, k = i)
conf_mtrx <- confusionMatrix(knn.pred, as.factor(valid.df_sample$Bin_pop))
acc <- conf_mtrx[[3]][1]
print(i)
print(acc)
}
